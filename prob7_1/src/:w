extern crate aoc;

use std::collections::HashSet;
use std::hash::{Hash, Hasher};

#[derive(Debug)]
struct Bag {
    name: String,
    contains: Vec<(i32, Bag)>,
}

impl PartialEq for Bag {
    fn eq(&self, other: &Self) -> bool {
        self.name == other.name
    }
}

impl Eq for Bag {}

impl Hash for Bag {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.name.hash(state);
    }
}

impl Bag {
    fn new(name: String, contains: Vec<(i32, Bag)>) -> Self {
        Self {
            name,
            contains
        }
    }

    fn get_parents(&self, bags: HashSet<Bag>) -> HashSet<Bag> {
        let mut parents = HashSet::new();
        'outer: for bag in bags {
            if self == &bag {
                for (_, child) in &bag.contains {
                    if child == self {
                        parents.insert(bag);
                        continue 'outer;
                    }
                }
            }
        }

        parents
    }
}

fn main() {
    let input = aoc::input_to_str("7_test");
    get_bag_set(&input);
}

fn get_bag_set(input: &str) -> HashSet<Bag> {
    let mut bags = HashSet::new();

    for line in input.lines() {
        let mut word_iter = line.split_whitespace().into_iter();
        let color = format!{"{}_{}", word_iter.next().unwrap(), word_iter.next().unwrap()};
        println!("Color: {}", color);
        word_iter.next().expect("Expected bags");
        word_iter.next().expect("Expected contain");

        let mut contains = vec![];

        let mut next = word_iter.next();
        while next != None && next.unwrap() != "no" {
            let contain_number = next.unwrap().parse::<i32>().expect("Could not parse as integral");
            let contain_color = format!("{}_{}", word_iter.next().unwrap(), word_iter.next().unwrap());
            word_iter.next().expect("Expect bag");

            contains.push((contain_number, contain_color));

            next = word_iter.next();
        }

        bags.insert(Bag {name: color, contains: contains});
    }

    bags
}
